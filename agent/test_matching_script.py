#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour d√©bugger le matching de l'agent voyage
Usage: python test_matching.py
"""

import sys
sys.path.insert(0, '.')

from graph import VOYAGES, match_voyage
from typing import Dict, Optional

def print_voyage_details(voyage: Dict):
    """Affiche les d√©tails d'un voyage de mani√®re format√©e."""
    print(f"    üìã D√©tails:")
    print(f"       - Plage: {voyage['plage']}")
    print(f"       - Montagne: {voyage['montagne']}")
    print(f"       - Ville: {voyage['ville']}")
    print(f"       - Sport: {voyage['sport']}")
    print(f"       - D√©tente: {voyage['detente']}")
    print(f"       - PMR: {voyage['acces_handicap']}")

def test_matching(test_name: str, criteres: Dict[str, Optional[bool]]):
    """
    Teste le matching avec des crit√®res donn√©s.
    """
    print("\n" + "="*70)
    print(f"üß™ {test_name}")
    print("="*70)
    
    print("\nüìä Crit√®res test√©s:")
    criteres_str = []
    for k, v in criteres.items():
        if v is True:
            criteres_str.append(f"  ‚úÖ {k}: OUI")
        elif v is False:
            criteres_str.append(f"  ‚ùå {k}: NON")
        else:
            criteres_str.append(f"  ‚ûñ {k}: (ignor√©)")
    
    for line in criteres_str:
        print(line)
    
    print("\nüîç R√©sultats du matching:")
    print("-" * 70)
    
    matches = []
    for i, voyage in enumerate(VOYAGES, 1):
        result = match_voyage(voyage, criteres)
        
        if result:
            print(f"\n{i}. ‚úÖ MATCH: {voyage['nom']}")
            print_voyage_details(voyage)
            matches.append(voyage)
        else:
            print(f"\n{i}. ‚ùå Pas de match: {voyage['nom']}")
            
            # Analyser pourquoi √ßa ne match pas
            blocages = []
            for crit, val in criteres.items():
                if val is not None and crit in voyage:
                    if voyage[crit] != val:
                        blocages.append(
                            f"{crit} (demand√©={val}, voyage={voyage[crit]})"
                        )
            
            if blocages:
                print(f"    üö´ Bloqu√© par: {', '.join(blocages)}")
    
    print("\n" + "="*70)
    print(f"üìà R√âSUM√â: {len(matches)}/{len(VOYAGES)} voyage(s) correspondent")
    
    if matches:
        print(f"üéØ Premier match (propos√© √† l'utilisateur): {matches[0]['nom']}")
    else:
        print("‚ö†Ô∏è  Aucun voyage ne correspond ‚Üí Message 'assouplir crit√®res'")
    
    print("="*70)
    
    return matches

def main():
    """Lance tous les tests de matching."""
    print("\n" + "üöÄ " * 20)
    print("TESTS DE MATCHING - AGENT VOYAGE")
    print("üöÄ " * 20 + "\n")
    
    # -------------------------------------------------------------------------
    # Test 1: Recherche simple - Plage uniquement
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 1: Recherche simple - Plage",
        {
            "plage": True,
            "montagne": None,
            "ville": None,
            "sport": None,
            "detente": None,
            "acces_handicap": None,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 2: Exclusivit√© stricte - Montagne seulement
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 2: Exclusivit√© stricte - Montagne (plage/ville=False)",
        {
            "plage": False,
            "montagne": True,
            "ville": False,
            "sport": None,
            "detente": None,
            "acces_handicap": None,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 3: Double crit√®re - Sport + Montagne
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 3: Double crit√®re - Sport + Montagne",
        {
            "plage": False,
            "montagne": True,
            "ville": False,
            "sport": True,
            "detente": False,
            "acces_handicap": None,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 4: D√©tente + PMR
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 4: D√©tente + Accessibilit√© PMR",
        {
            "plage": None,
            "montagne": None,
            "ville": None,
            "sport": False,
            "detente": True,
            "acces_handicap": True,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 5: Heuristique Montpellier (plage + ville, montagne=False)
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 5: Heuristique Montpellier (plage + ville)",
        {
            "plage": True,
            "montagne": False,
            "ville": True,
            "sport": None,
            "detente": None,
            "acces_handicap": None,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 6: Crit√®res restrictifs (aucun match attendu)
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 6: Crit√®res restrictifs - Plage + Sport + Montagne",
        {
            "plage": True,
            "montagne": True,  # Contradictoire avec plage (exclusivit√©)
            "ville": None,
            "sport": True,
            "detente": None,
            "acces_handicap": None,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 7: Ville uniquement (exclusivit√©)
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 7: Ville uniquement (exclusivit√©)",
        {
            "plage": False,
            "montagne": False,
            "ville": True,
            "sport": None,
            "detente": None,
            "acces_handicap": None,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 8: Tous crit√®res √† None (devrait retourner tous les voyages)
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 8: Aucun crit√®re (tous None) - Attendu: tous matchent",
        {
            "plage": None,
            "montagne": None,
            "ville": None,
            "sport": None,
            "detente": None,
            "acces_handicap": None,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 9: Campagne (aucun th√®me g√©ographique)
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 9: Campagne (plage=False, montagne=False, ville=False)",
        {
            "plage": False,
            "montagne": False,
            "ville": False,
            "sport": None,
            "detente": True,
            "acces_handicap": None,
        }
    )
    
    # -------------------------------------------------------------------------
    # Test 10: Sport sans d√©tente
    # -------------------------------------------------------------------------
    test_matching(
        "TEST 10: Sport uniquement (d√©tente=False)",
        {
            "plage": None,
            "montagne": None,
            "ville": None,
            "sport": True,
            "detente": False,
            "acces_handicap": None,
        }
    )
    
    print("\n" + "‚úÖ " * 20)
    print("TESTS TERMIN√âS")
    print("‚úÖ " * 20 + "\n")

if __name__ == "__main__":
    try:
        main()
    except ImportError as e:
        print(f"\n‚ùå ERREUR: Impossible d'importer depuis graph.py")
        print(f"   D√©tail: {e}")
        print(f"\nüí° Solution: Assure-toi que graph.py est dans le m√™me dossier\n")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERREUR INATTENDUE: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
